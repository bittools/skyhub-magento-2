<?php

/**
 * BitTools Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BitTools
 * @package   BitTools_SkyHub
 *
 * @copyright Copyright (c) 2021 B2W Digital - BitTools Platform.
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */

namespace BitTools\SkyHub\Integration;

use BitTools\SkyHub\Api\ServiceInterface;
use BitTools\SkyHub\Integration\Service;
use SkyHub\Api\Service\ServiceMultipart as ServiceMultipartSdk;
use Magento\Framework\App\Filesystem\DirectoryList;
use BitTools\SkyHub\StoreConfig\Context as ConfigContext;
use BitTools\SkyHub\Helper\Context as HelperContext;
use SkyHub\Api;

/**
 * ServiceMultipart class
 */
class ServiceMultipart extends Service implements ServiceInterface
{
    /**
     * @var ServiceMultipartSdk
     */
    protected $serviceMultipartSdk;

    /**
     * ServiceMultipart constructor.
     *
     * @param HelperContext $helperContext
     * @param ConfigContext $configContext
     * @param DirectoryList $directoryList
     * @param ServiceMultipartSdk $serviceMultipartSdk
     */
    public function __construct(
        HelperContext $helperContext,
        ConfigContext $configContext,
        DirectoryList $directoryList,
        ServiceMultipartSdk $serviceMultipartSdk
    ) {
        $this->helperContext = $helperContext;
        $this->configContext = $configContext;
        $this->directoryList = $directoryList;
        $this->serviceMultipartSdk = $serviceMultipartSdk;
        
        $this->initApi();
    }

    /**
     * @return $this
     */
    public function initApi()
    {
        $this->api = new Api(
            $this->getServiceEmail(),
            $this->getServiceApiKey(),
            $this->xAccountKey,
            null,
            $this->serviceMultipartSdk
        );
        
        if (!$this->configContext->log()->isEnabled()) {
            return $this;
        }

        /**
         * If the log does not work properly for any case it can't stop the integration process.
         */
        try {
            $logFileName = $this->configContext->log()->getFilename();
            $logFilePath = $this->directoryList->getPath(DirectoryList::LOG);

            $this->apiService()
                ->setLogAllowed(true)
                ->setLogFileName($logFileName)
                ->setLogFilePath($logFilePath);
        } catch (\Exception $e) {
            $this->helperContext->logger()->critical($e);
        }
        
        return $this;
    }
}