<?php

/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright Copyright (c) 2022 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */

namespace BitTools\SkyHub\Controller\Adminhtml\Queue\Catalog\Product;

use Magento\Backend\App\Action\Context as BackendContext;
use BitTools\SkyHub\Model\ResourceModel\QueueFactory;
use Magento\Ui\Component\MassAction\Filter;
use BitTools\SkyHub\Model\ResourceModel\Queue\CollectionFactory;
use BitTools\SkyHub\Model\ResourceModel\Queue\Collection;
use Magento\Catalog\Model\ProductRepository;
use Magento\Backend\App\Action;
use BitTools\SkyHub\Integration\Integrator\Catalog\Product as IntegrationProduct;
use Magento\Framework\Controller\ResultFactory;

/**
 * ExecuteQueue class
 */
class ExecuteQueue extends Action
{
    /**
     * @var string
     */
    const ADMIN_RESOURCE = 'BitTools_SkyHub::skyhub_queues_add_product';

    /**
     * @var QueueFactory
     */
    protected $queueResourceFactory;

    /**
     * @var Filter
     */
    protected $filter;

    /**
     * @var ProductRepository
     */
    protected $productRepository;

    /**
     * @var IntegrationProduct
     */
    protected $integrationProduct;

    /**
     * ExecuteQueue constructor
     *
     * @param BackendContext $context
     * @param QueueFactory $queueResourceFactory
     * @param Filter $filter
     * @param CollectionFactory $collectionFactory
     * @param ProductFactory $productFactory
     * @param IntegrationProduct $integrationProduct
     */
    public function __construct(
        BackendContext $context,
        QueueFactory $queueResourceFactory,
        Filter $filter,
        CollectionFactory $collectionFactory,
        ProductRepository $productRepository,
        IntegrationProduct $integrationProduct
    ) {
        parent::__construct($context);
        $this->queueResourceFactory = $queueResourceFactory;
        $this->filter = $filter;
        $this->collectionFactory = $collectionFactory;
        $this->productRepository = $productRepository;
        $this->integrationProduct = $integrationProduct;
    }

    /**
     * @return \Magento\Framework\View\Result\Page
     */
    public function execute()
    {
        $collection = $this->filter->getCollection($this->collectionFactory->create());
        return $this->executeQueueSelected($collection);
    }

    /**
     * Execute queue by collection
     *
     * @param Collection $collection
     * @return void
     */
    public function executeQueueSelected(Collection $collection)
    {
        foreach ($collection->getItems() as $queue) {
            try {
                /** @var \Magento\Catalog\Api\Data\ProductInterface $product */
                $product = $this->productRepository->getById($queue->getEntityId());
            } catch (\Exception $e) {
                /** @var \SkyHub\Api\Handler\Response\HandlerException $response */
                $this->getQueueResource()->setFailedEntityIds(
                    $product->getId(),
                    \BitTools\SkyHub\Model\Entity::TYPE_CATALOG_PRODUCT,
                    $e->getMessage()
                );

                continue;
            }

            /** @var \SkyHub\Api\Handler\Response\HandlerInterface $response */
            $response = $this->integrationProduct->createOrUpdate($product);

            /*
             * If the response is exactly equal to false, means it cannot be integrated because of internal validation;
             */
            if ($response === false) {
                $this->getQueueResource()->removeFromQueue(
                    [$product->getId()],
                    \BitTools\SkyHub\Model\Entity::TYPE_CATALOG_PRODUCT
                );
                continue;
            }

            if ($this->isErrorResponse($response)) {
                /** @var \SkyHub\Api\Handler\Response\HandlerException $response */
                $this->getQueueResource()->setFailedEntityIds(
                    $product->getId(),
                    \BitTools\SkyHub\Model\Entity::TYPE_CATALOG_PRODUCT,
                    $response->message()
                );
                
                continue;
            }
            $successQueueIds[] = $product->getId();
        }

        if (!empty($successQueueIds)) {
            $this->getQueueResource()->removeFromQueue(
                $successQueueIds,
                \BitTools\SkyHub\Model\Entity::TYPE_CATALOG_PRODUCT
            );
            $this->messageManager->addSuccessMessage(
                __('Products integration with success.')
            );
        }

        return $this->resultFactory->create(ResultFactory::TYPE_REDIRECT)->setPath('bittools_skyhub/queue_catalog_product/index');
    }

    /**
     * @param \SkyHub\Api\Handler\Response\HandlerInterface $response
     *
     * @return bool
     */
    protected function isErrorResponse($response)
    {
        if (!$response) {
            return true;
        }
        
        if ($response->invalid()) {
            return true;
        }
        
        if ($response->exception()) {
            return true;
        }
        
        return false;
    }

    /**
     * @return \BitTools\SkyHub\Model\ResourceModel\Queue
     */
    public function getQueueResource()
    {
        return $this->queueResourceFactory->create();
    }
}